//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace HeatMap.HeatMapDataWebService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="getHeatMapDataSoap", Namespace="http://tempuri.org/")]
    public partial class getHeatMapData : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetHeatMapDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHeatMapData2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHeatMapDataByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveIALocationDataOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public getHeatMapData() {
            this.Url = global::HeatMap.Properties.Settings.Default.HeatMap_HeatMapDataWebService_getHeatMapData;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetHeatMapDataCompletedEventHandler GetHeatMapDataCompleted;
        
        /// <remarks/>
        public event GetHeatMapData2CompletedEventHandler GetHeatMapData2Completed;
        
        /// <remarks/>
        public event GetHeatMapDataByDateCompletedEventHandler GetHeatMapDataByDateCompleted;
        
        /// <remarks/>
        public event SaveIALocationDataCompletedEventHandler SaveIALocationDataCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHeatMapData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetHeatMapData() {
            object[] results = this.Invoke("GetHeatMapData", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetHeatMapDataAsync() {
            this.GetHeatMapDataAsync(null);
        }
        
        /// <remarks/>
        public void GetHeatMapDataAsync(object userState) {
            if ((this.GetHeatMapDataOperationCompleted == null)) {
                this.GetHeatMapDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHeatMapDataOperationCompleted);
            }
            this.InvokeAsync("GetHeatMapData", new object[0], this.GetHeatMapDataOperationCompleted, userState);
        }
        
        private void OnGetHeatMapDataOperationCompleted(object arg) {
            if ((this.GetHeatMapDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHeatMapDataCompleted(this, new GetHeatMapDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHeatMapData2", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetHeatMapData2(string level) {
            object[] results = this.Invoke("GetHeatMapData2", new object[] {
                        level});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetHeatMapData2Async(string level) {
            this.GetHeatMapData2Async(level, null);
        }
        
        /// <remarks/>
        public void GetHeatMapData2Async(string level, object userState) {
            if ((this.GetHeatMapData2OperationCompleted == null)) {
                this.GetHeatMapData2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHeatMapData2OperationCompleted);
            }
            this.InvokeAsync("GetHeatMapData2", new object[] {
                        level}, this.GetHeatMapData2OperationCompleted, userState);
        }
        
        private void OnGetHeatMapData2OperationCompleted(object arg) {
            if ((this.GetHeatMapData2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHeatMapData2Completed(this, new GetHeatMapData2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHeatMapDataByDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetHeatMapDataByDate(string level, System.DateTime startdate, System.DateTime enddate) {
            object[] results = this.Invoke("GetHeatMapDataByDate", new object[] {
                        level,
                        startdate,
                        enddate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetHeatMapDataByDateAsync(string level, System.DateTime startdate, System.DateTime enddate) {
            this.GetHeatMapDataByDateAsync(level, startdate, enddate, null);
        }
        
        /// <remarks/>
        public void GetHeatMapDataByDateAsync(string level, System.DateTime startdate, System.DateTime enddate, object userState) {
            if ((this.GetHeatMapDataByDateOperationCompleted == null)) {
                this.GetHeatMapDataByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHeatMapDataByDateOperationCompleted);
            }
            this.InvokeAsync("GetHeatMapDataByDate", new object[] {
                        level,
                        startdate,
                        enddate}, this.GetHeatMapDataByDateOperationCompleted, userState);
        }
        
        private void OnGetHeatMapDataByDateOperationCompleted(object arg) {
            if ((this.GetHeatMapDataByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHeatMapDataByDateCompleted(this, new GetHeatMapDataByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveIALocationData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveIALocationData(string deviceid, string tokenid, string longitude, string latitude, string venueid, string floorplanid, string floorid) {
            this.Invoke("SaveIALocationData", new object[] {
                        deviceid,
                        tokenid,
                        longitude,
                        latitude,
                        venueid,
                        floorplanid,
                        floorid});
        }
        
        /// <remarks/>
        public void SaveIALocationDataAsync(string deviceid, string tokenid, string longitude, string latitude, string venueid, string floorplanid, string floorid) {
            this.SaveIALocationDataAsync(deviceid, tokenid, longitude, latitude, venueid, floorplanid, floorid, null);
        }
        
        /// <remarks/>
        public void SaveIALocationDataAsync(string deviceid, string tokenid, string longitude, string latitude, string venueid, string floorplanid, string floorid, object userState) {
            if ((this.SaveIALocationDataOperationCompleted == null)) {
                this.SaveIALocationDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveIALocationDataOperationCompleted);
            }
            this.InvokeAsync("SaveIALocationData", new object[] {
                        deviceid,
                        tokenid,
                        longitude,
                        latitude,
                        venueid,
                        floorplanid,
                        floorid}, this.SaveIALocationDataOperationCompleted, userState);
        }
        
        private void OnSaveIALocationDataOperationCompleted(object arg) {
            if ((this.SaveIALocationDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveIALocationDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetHeatMapDataCompletedEventHandler(object sender, GetHeatMapDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHeatMapDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHeatMapDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetHeatMapData2CompletedEventHandler(object sender, GetHeatMapData2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHeatMapData2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHeatMapData2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetHeatMapDataByDateCompletedEventHandler(object sender, GetHeatMapDataByDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHeatMapDataByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHeatMapDataByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SaveIALocationDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591